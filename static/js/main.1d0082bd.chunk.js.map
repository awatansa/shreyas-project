{"version":3,"sources":["service/index.js","App.jsx","store/index.js","index.jsx"],"names":["api","createApi","baseQuery","fetchBaseQuery","baseUrl","endpoints","build","getCountries","query","url","fetchStates","mutation","country","method","headers","Accepts","Connection","body","JSON","parse","stringify","useFetchStatesMutation","useGetCountriesQuery","App","data","isLoading","trigger","options","isFetchLoading","stateData","console","log","className","map","item","onClick","states","state","name","state_code","store","configureStore","reducer","reducerPath","middleware","getDefaultMiddleWare","concat","ReactDOM","render","document","getElementById"],"mappings":"qMAEaA,EAAMC,YAAU,CAC3BC,UAAWC,YAAe,CACxBC,QAAS,yCAEXC,UAAW,SAACC,GAAD,MAAY,CACrBC,aAAcD,EAAME,MAAM,CACxBA,MAAO,iBAAO,CACZC,IAAK,iBAGTC,YAAaJ,EAAMK,SAAS,CAC1BH,MAAO,SAACI,GACN,MAAO,CACLH,IAAK,mBACLI,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBC,QAAS,MACTC,WAAY,cAEdC,KAAMC,KAAKC,MAAMD,KAAKE,UAAU,CAAER,QAASA,aAQ7CS,EAAiDrB,EAAjDqB,uBAAwBC,EAAyBtB,EAAzBsB,qB,eC3BjB,SAASC,IAAO,IAAD,EAC5B,EAA4BD,IAApBE,EAAR,EAAQA,KAAMC,EAAd,EAAcA,UACd,EAA2BJ,IAA3B,mBAAOK,EAAP,KAAgBC,EAAhB,KACmBC,EAAoCD,EAA/CF,UAAiCI,EAAcF,EAApBH,KAInC,OAFAM,QAAQC,IAAIF,GAGV,sBAAKG,UAAW,+BAAhB,UACE,4DACA,sBAAKA,UAAW,sBAAhB,UACE,gCACE,mBAAGA,UAAW,MAAd,+BACCP,EACC,4CAEA,6BACGD,EAAKA,KAAKS,KAAI,SAACC,GACd,OACE,6BACE,wBAAQC,QAAS,kBAAMT,EAAQQ,EAAKtB,UAApC,SACGsB,EAAKtB,WAFDsB,EAAKtB,iBAUxB,gCACE,mBAAGoB,UAAW,MAAd,4BACCJ,EACC,4CAEA,oCACGC,QADH,IACGA,GADH,UACGA,EAAWL,YADd,aACG,EAAiBY,OAAOH,KAAI,SAACI,GAC5B,OAAO,6BAA4BA,EAAMC,MAAzBD,EAAME,0B,kDCpCzBC,EAAQC,YAAe,CAClCC,QAAQ,eACL1C,EAAI2C,YAAc3C,EAAI0C,SAEzBE,WAAY,SAACC,GAAD,OACVA,IAAuBC,OAAO9C,EAAI4C,eCFtCG,IAASC,OACP,cAAC,IAAD,CAAUR,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFS,SAASC,eAAe,W","file":"static/js/main.1d0082bd.chunk.js","sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\n\r\nexport const api = createApi({\r\n  baseQuery: fetchBaseQuery({\r\n    baseUrl: \"https://countriesnow.space/api/v0.1/\",\r\n  }),\r\n  endpoints: (build) => ({\r\n    getCountries: build.query({\r\n      query: () => ({\r\n        url: \"/countries\",\r\n      }),\r\n    }),\r\n    fetchStates: build.mutation({\r\n      query: (country) => {\r\n        return {\r\n          url: \"countries/states\",\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Accepts: \"*/*\",\r\n            Connection: \"keep-alive\",\r\n          },\r\n          body: JSON.parse(JSON.stringify({ country: country })),\r\n          // mode: \"no-cors\",\r\n        };\r\n      },\r\n    }),\r\n  }),\r\n});\r\n\r\nconst { useFetchStatesMutation, useGetCountriesQuery } = api;\r\n\r\nexport { useFetchStatesMutation, useGetCountriesQuery };\r\n","import { useFetchStatesMutation, useGetCountriesQuery } from \"service\";\r\nimport \"./App.css\";\r\n\r\nexport default function App() {\r\n  const { data, isLoading } = useGetCountriesQuery();\r\n  const [trigger, options] = useFetchStatesMutation();\r\n  const { isLoading: isFetchLoading, data: stateData } = options;\r\n\r\n  console.log(stateData);\r\n\r\n  return (\r\n    <div className={\"flex-column align-center p-1\"}>\r\n      <h1>Countries and Their States</h1>\r\n      <div className={\"flex justify-center\"}>\r\n        <div>\r\n          <p className={\"p-1\"}>List of Countries</p>\r\n          {isLoading ? (\r\n            <h3>Loading...</h3>\r\n          ) : (\r\n            <ul>\r\n              {data.data.map((item) => {\r\n                return (\r\n                  <li key={item.country}>\r\n                    <button onClick={() => trigger(item.country)}>\r\n                      {item.country}\r\n                    </button>\r\n                  </li>\r\n                );\r\n              })}\r\n            </ul>\r\n          )}\r\n        </div>\r\n        <div>\r\n          <p className={\"p-1\"}>List of States</p>\r\n          {isFetchLoading ? (\r\n            <h3>Loading...</h3>\r\n          ) : (\r\n            <ul>\r\n              {stateData?.data?.states.map((state) => {\r\n                return <li key={state.state_code}>{state.name}</li>;\r\n              })}\r\n            </ul>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport { api } from \"../service\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    [api.reducerPath]: api.reducer,\r\n  },\r\n  middleware: (getDefaultMiddleWare) =>\r\n    getDefaultMiddleWare().concat(api.middleware),\r\n});\r\n","import App from \"./App\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}